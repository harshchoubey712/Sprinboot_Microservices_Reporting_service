/*
 * Transaction Service API
 * API to handle transactions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.TransactionDTO;
import org.openapitools.client.model.TransactionPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTransaction
     * @param transactionDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transaction created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionCall(@javax.annotation.Nonnull TransactionDTO transactionDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionDTO;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransactionValidateBeforeCall(@javax.annotation.Nonnull TransactionDTO transactionDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionDTO' is set
        if (transactionDTO == null) {
            throw new ApiException("Missing the required parameter 'transactionDTO' when calling createTransaction(Async)");
        }

        return createTransactionCall(transactionDTO, _callback);

    }

    /**
     * Create a new transaction
     * 
     * @param transactionDTO  (required)
     * @return TransactionDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transaction created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TransactionDTO createTransaction(@javax.annotation.Nonnull TransactionDTO transactionDTO) throws ApiException {
        ApiResponse<TransactionDTO> localVarResp = createTransactionWithHttpInfo(transactionDTO);
        return localVarResp.getData();
    }

    /**
     * Create a new transaction
     * 
     * @param transactionDTO  (required)
     * @return ApiResponse&lt;TransactionDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transaction created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionDTO> createTransactionWithHttpInfo(@javax.annotation.Nonnull TransactionDTO transactionDTO) throws ApiException {
        okhttp3.Call localVarCall = createTransactionValidateBeforeCall(transactionDTO, null);
        Type localVarReturnType = new TypeToken<TransactionDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new transaction (asynchronously)
     * 
     * @param transactionDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transaction created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionAsync(@javax.annotation.Nonnull TransactionDTO transactionDTO, final ApiCallback<TransactionDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransactionValidateBeforeCall(transactionDTO, _callback);
        Type localVarReturnType = new TypeToken<TransactionDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionsByStatus
     * @param status Status code to filter transactions (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param xRequestID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transactions retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No transactions found for the given status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsByStatusCall(@javax.annotation.Nonnull BigDecimal status, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/statuses/{status}"
            .replace("{" + "status" + "}", localVarApiClient.escapeString(status.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionsByStatusValidateBeforeCall(@javax.annotation.Nonnull BigDecimal status, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String xRequestID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling getTransactionsByStatus(Async)");
        }

        return getTransactionsByStatusCall(status, offset, limit, xRequestID, _callback);

    }

    /**
     * Get transactions by status
     * 
     * @param status Status code to filter transactions (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param xRequestID  (optional)
     * @return TransactionPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transactions retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No transactions found for the given status </td><td>  -  </td></tr>
     </table>
     */
    public TransactionPage getTransactionsByStatus(@javax.annotation.Nonnull BigDecimal status, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String xRequestID) throws ApiException {
        ApiResponse<TransactionPage> localVarResp = getTransactionsByStatusWithHttpInfo(status, offset, limit, xRequestID);
        return localVarResp.getData();
    }

    /**
     * Get transactions by status
     * 
     * @param status Status code to filter transactions (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param xRequestID  (optional)
     * @return ApiResponse&lt;TransactionPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transactions retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No transactions found for the given status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionPage> getTransactionsByStatusWithHttpInfo(@javax.annotation.Nonnull BigDecimal status, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = getTransactionsByStatusValidateBeforeCall(status, offset, limit, xRequestID, null);
        Type localVarReturnType = new TypeToken<TransactionPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transactions by status (asynchronously)
     * 
     * @param status Status code to filter transactions (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param xRequestID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transactions retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No transactions found for the given status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsByStatusAsync(@javax.annotation.Nonnull BigDecimal status, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String xRequestID, final ApiCallback<TransactionPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionsByStatusValidateBeforeCall(status, offset, limit, xRequestID, _callback);
        Type localVarReturnType = new TypeToken<TransactionPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
